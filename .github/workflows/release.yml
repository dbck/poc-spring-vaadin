name: Release Package

on:
  push:
    branches: [ release ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
#      with:
#        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: OSSRH_USERNAME # env variable for username in deploy
        server-password: OSSRH_PASSWORD # env variable for token in deploy
        gpg-private-key: ${{ secrets.OSSRH_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: OSSRH_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Prepare version
      run: |
        export CURRENT_DEVELOPMENT_VERSION="$(mvn ${MAVEN_OPTIONS} help:evaluate -Dexpression=project.version -q -DforceStdout)"
        echo "CURRENT_DEVELOPMENT_VERSION=${CURRENT_DEVELOPMENT_VERSION}" >> $GITHUB_ENV
        export NEXT_DEVELOPMENT_VERSION="$(mvn ${MAVEN_OPTIONS} build-helper:parse-version -DgenerateBackupPoms=false -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} help:evaluate -Dexpression=newVersion -q -DforceStdout)-SNAPSHOT"
        echo "NEXT_DEVELOPMENT_VERSION=${NEXT_DEVELOPMENT_VERSION}" >> $GITHUB_ENV
        export CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
        echo "CURRENT_BRANCH=${CURRENT_BRANCH}" >> $GITHUB_ENV
        export REVISION_BRANCH=$([[ ${CURRENT_BRANCH} != "release" && ${CURRENT_BRANCH} != "main" ]] && echo "-${CURRENT_BRANCH}")
        echo "REVISION_BRANCH=${REVISION_BRANCH}" >> $GITHUB_ENV
        export REVISION_TYPE=$([[ ${CURRENT_BRANCH} != "release" ]] && echo "-SNAPSHOT")
        echo "REVISION_TYPE=${REVISION_TYPE}" >> $GITHUB_ENV

    - name: Build, test and deploy with maven
      run: |
        # Configure git
        git config user.name github-actions
        git config user.email github-actions@github.com
        # Build and deploy
        mvn ${MAVEN_OPTIONS} versions:set -DnewVersion=${CURRENT_DEVELOPMENT_VERSION/-SNAPSHOT/}
        mvn ${MAVEN_OPTIONS} -Dusername=${GITHUB_TOKEN} -Prelease clean deploy
        # Increment revision of develop branch based on main revision value
        git reset --hard origin/release
        git fetch --all --tags
        git checkout main
        git reset --hard origin/main
        git pull --all --ff-only
        mvn ${MAVEN_OPTIONS} -DgenerateBackupPoms=false versions:set -DnewVersion=${NEXT_DEVELOPMENT_VERSION}
        #mvn ${MAVEN_OPTIONS} compile #Only needed if eg. README will be generated which includes the version number 
        git commit -am "Updated revision to ${NEXT_DEVELOPMENT_VERSION}. Prepared for next development iteration." && git push
        git reset --hard
        git checkout release
      env:
        MAVEN_OPTIONS: --quiet --batch-mode --no-transfer-progress
        GITHUB_TOKEN: ${{ github.token }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}

    - name: Quality check with maven and sonar
      run: |
        mvn ${MAVEN_OPTIONS} versions:set -DnewVersion=${CURRENT_DEVELOPMENT_VERSION/-SNAPSHOT/}
        mvn ${MAVEN_OPTIONS} -Pquality verify # Test already run in previous step
        
      env:
        MAVEN_OPTIONS: --quiet --batch-mode --no-transfer-progress
        GITHUB_TOKEN: ${{ github.token }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
